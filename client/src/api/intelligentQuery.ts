/**
 * Sistema de Consulta Inteligente
 * Gerencia consultas do usu√°rio, determina quais partes do documento s√£o necess√°rias
 */

import { chatWithAI } from './chat';
import { costMonitor, estimateTokens, estimateCost } from './costMonitor';
import type { DocumentDivision } from './documentProcessor';

export interface QueryAnalysisResult {
  needsDocument: boolean;
  sectionsNeeded: string[];
  reasoning: string;
  queryType: 'document-related' | 'general' | 'mixed';
}

export interface QueryResponse {
  answer: string;
  sectionsUsed: string[];
  totalCost: number;
  processingTime: number;
}

/**
 * Prompt para an√°lise de consulta
 */
const QUERY_ANALYSIS_PROMPT = `Voc√™ √© um especialista em an√°lise de consultas sobre documentos militares brasileiros.

TAREFA: Analisar a pergunta do usu√°rio e determinar quais se√ß√µes do documento s√£o necess√°rias para responder.

SE√á√ïES DISPON√çVEIS:
{SECTIONS_SUMMARY}

PERGUNTA DO USU√ÅRIO:
{USER_QUERY}

INSTRU√á√ïES:
1. Analise se a pergunta est√° relacionada ao documento ou √© uma pergunta geral
2. Se for relacionada ao documento, identifique EXATAMENTE quais se√ß√µes s√£o necess√°rias
3. Se for uma pergunta geral, indique que n√£o precisa de nenhuma se√ß√£o
4. Seja preciso - n√£o solicite se√ß√µes desnecess√°rias para economizar tokens

FORMATO DE RESPOSTA OBRIGAT√ìRIO (JSON):
{
  "needsDocument": true/false,
  "sectionsNeeded": ["nome_da_secao1", "nome_da_secao2"],
  "reasoning": "Explica√ß√£o de por que essas se√ß√µes s√£o necess√°rias",
  "queryType": "document-related" | "general" | "mixed"
}

RESPOSTA:`;

/**
 * Prompt para resposta final
 */
const FINAL_ANSWER_PROMPT = `Voc√™ √© o PerguntaProSub, uma IA militar brasileira especializada em regulamentos militares.

SE√á√ïES RELEVANTES DO DOCUMENTO:
{RELEVANT_SECTIONS}

PERGUNTA DO USU√ÅRIO:
{USER_QUERY}

INSTRU√á√ïES:
1. Use APENAS as se√ß√µes fornecidas para responder
2. Seja preciso e cite as se√ß√µes espec√≠ficas
3. Use terminologia militar adequada
4. N√£o invente informa√ß√µes que n√£o est√£o nas se√ß√µes fornecidas

RESPOSTA:`;

/**
 * Classe principal para gerenciar consultas inteligentes
 */
export class IntelligentQuery {
  private queryCount = 0;
  private totalCost = 0;

  /**
   * Processa uma consulta completa do usu√°rio
   */
  async processQuery(
    userQuery: string,
    documentDivisions: DocumentDivision[],
    systemPrompt: string
  ): Promise<QueryResponse> {
    const startTime = Date.now();
    this.queryCount++;
    
    console.log(`[INTELLIGENT_QUERY] üîç INICIANDO CONSULTA ${this.queryCount}:`);
    console.log(`[INTELLIGENT_QUERY] üîç - Pergunta: "${userQuery.substring(0, 150)}..."`);
    console.log(`[INTELLIGENT_QUERY] ÔøΩ - Divis√µes dispon√≠veis: ${documentDivisions.length}`);
    
    // Log das divis√µes dispon√≠veis
    documentDivisions.forEach((div, index) => {
      console.log(`[INTELLIGENT_QUERY] üìö ${index + 1}. "${div.nome}" (${div.conteudo.length} chars)`);
    });
    
    try {
      // Etapa 1: Analisar a consulta
      console.log(`[INTELLIGENT_QUERY] üîç ETAPA 1: Analisando consulta...`);
      const analysis = await this.analyzeQuery(userQuery, documentDivisions);
      
      console.log(`[INTELLIGENT_QUERY] üîç ‚úÖ AN√ÅLISE CONCLU√çDA:`);
      console.log(`[INTELLIGENT_QUERY] üîç - Precisa de documento: ${analysis.needsDocument}`);
      console.log(`[INTELLIGENT_QUERY] üîç - Tipo da consulta: ${analysis.queryType}`);
      console.log(`[INTELLIGENT_QUERY] üîç - Se√ß√µes necess√°rias: ${analysis.sectionsNeeded.length}`);
      
      if (analysis.sectionsNeeded.length > 0) {
        console.log(`[INTELLIGENT_QUERY] üéØ SE√á√ïES SELECIONADAS PELA AN√ÅLISE:`);
        analysis.sectionsNeeded.forEach((sectionName, index) => {
          console.log(`[INTELLIGENT_QUERY] üéØ ${index + 1}. "${sectionName}"`);
        });
      }
      
      // Etapa 2: Gerar resposta baseada na an√°lise
      console.log(`[INTELLIGENT_QUERY] üîç ETAPA 2: Gerando resposta...`);
      const response = await this.generateResponse(userQuery, analysis, documentDivisions, systemPrompt);
      
      const processingTime = Date.now() - startTime;
      
      console.log(`[INTELLIGENT_QUERY] ‚úÖ Consulta processada em ${processingTime}ms`);
      console.log(`[INTELLIGENT_QUERY] üí∞ Custo total da consulta: $${response.totalCost.toFixed(6)}`);
      console.log(`[INTELLIGENT_QUERY] üìä Se√ß√µes utilizadas: ${response.sectionsUsed.join(', ')}`);
      
      return response;
      
    } catch (error) {
      const processingTime = Date.now() - startTime;
      console.error(`[INTELLIGENT_QUERY] ‚ùå Erro durante processamento ap√≥s ${processingTime}ms:`, error);
      throw error;
    }
  }

  /**
   * Analisa a consulta do usu√°rio para determinar quais se√ß√µes s√£o necess√°rias
   */
  private async analyzeQuery(userQuery: string, divisions: DocumentDivision[]): Promise<QueryAnalysisResult> {
    console.log(`[INTELLIGENT_QUERY] üîç Analisando consulta...`);
    
    // Cria resumo das se√ß√µes dispon√≠veis
    const sectionsummary = divisions.map(div => 
      `- ${div.nome}: ${div.resumo}`
    ).join('\n');

    // Monta prompt de an√°lise
    const analysisPrompt = QUERY_ANALYSIS_PROMPT
      .replace('{SECTIONS_SUMMARY}', sectionsummary)
      .replace('{USER_QUERY}', userQuery);

    // Calcula custos
    const inputTokens = estimateTokens(analysisPrompt);
    const estimatedCost = estimateCost(inputTokens);
    
    console.log(`[INTELLIGENT_QUERY] üí∞ An√°lise - Tokens: ${inputTokens}, Custo: $${estimatedCost.toFixed(6)}`);
    
    // Chama API para an√°lise
    const apiResponse = await chatWithAI(analysisPrompt, []);
    
    // Calcula custo final
    const outputTokens = estimateTokens(apiResponse);
    const totalCost = estimateCost(inputTokens, outputTokens);
    
    console.log(`[INTELLIGENT_QUERY] üí∞ An√°lise - Resposta: ${outputTokens} tokens, Custo final: $${totalCost.toFixed(6)}`);
    
    // Registra custo
    costMonitor.logOperation(
      'IntelligentQuery',
      'ANALYSIS',
      inputTokens,
      outputTokens,
      `An√°lise da pergunta: ${userQuery.substring(0, 50)}...`
    );
    this.totalCost += totalCost;
    
    // Parseia resposta
    try {
      const cleanResponse = apiResponse.replace(/```json|```/g, '').trim();
      const analysis: QueryAnalysisResult = JSON.parse(cleanResponse);
      
      console.log(`[INTELLIGENT_QUERY] ‚úÖ An√°lise conclu√≠da:`);
      console.log(`[INTELLIGENT_QUERY] üìã Precisa documento: ${analysis.needsDocument}`);
      console.log(`[INTELLIGENT_QUERY] üìã Tipo de consulta: ${analysis.queryType}`);
      console.log(`[INTELLIGENT_QUERY] üìã Se√ß√µes necess√°rias: ${analysis.sectionsNeeded.join(', ')}`);
      console.log(`[INTELLIGENT_QUERY] üìã Reasoning: ${analysis.reasoning}`);
      
      return analysis;
      
    } catch (parseError) {
      console.error(`[INTELLIGENT_QUERY] ‚ùå Erro ao parsear an√°lise:`, parseError);
      console.log(`[INTELLIGENT_QUERY] üìù Resposta original:`, apiResponse);
      
      // Fallback: assumir que precisa de todas as se√ß√µes
      return {
        needsDocument: true,
        sectionsNeeded: divisions.map(div => div.nome),
        reasoning: 'Erro no parse - usando todas as se√ß√µes como fallback',
        queryType: 'document-related'
      };
    }
  }

  /**
   * Gera resposta final baseada na an√°lise
   */
  private async generateResponse(
    userQuery: string,
    analysis: QueryAnalysisResult,
    divisions: DocumentDivision[],
    systemPrompt: string
  ): Promise<QueryResponse> {
    console.log(`[INTELLIGENT_QUERY] ü§ñ Gerando resposta final...`);
    
    let finalPrompt: string;
    let sectionsUsed: string[] = [];
    
    if (!analysis.needsDocument) {
      // Pergunta geral - n√£o precisa de se√ß√µes do documento
      console.log(`[INTELLIGENT_QUERY] üìù Pergunta geral - sem se√ß√µes do documento`);
      finalPrompt = systemPrompt + `\n\nPERGUNTA: ${userQuery}`;
      
    } else {
      // Pergunta relacionada ao documento - usar se√ß√µes espec√≠ficas
      console.log(`[INTELLIGENT_QUERY] üìö Pergunta sobre documento - usando se√ß√µes espec√≠ficas`);
      
      // Filtra se√ß√µes necess√°rias
      const relevantSections = divisions.filter(div => 
        analysis.sectionsNeeded.includes(div.nome)
      );
      
      if (relevantSections.length === 0) {
        console.warn(`[INTELLIGENT_QUERY] ‚ö†Ô∏è Nenhuma se√ß√£o encontrada, usando todas como fallback`);
        relevantSections.push(...divisions);
      }
      
      sectionsUsed = relevantSections.map(div => div.nome);
      
      // Monta conte√∫do das se√ß√µes
      const sectionsContent = relevantSections.map(div => 
        `=== ${div.nome} ===\n${div.conteudo}\n`
      ).join('\n');
      
      finalPrompt = FINAL_ANSWER_PROMPT
        .replace('{RELEVANT_SECTIONS}', sectionsContent)
        .replace('{USER_QUERY}', userQuery);
      
      console.log(`[INTELLIGENT_QUERY] üìä Se√ß√µes utilizadas: ${sectionsUsed.join(', ')}`);
      console.log(`[INTELLIGENT_QUERY] üìä Conte√∫do total: ${sectionsContent.length} caracteres`);
    }
    
    // Calcula custos
    const inputTokens = estimateTokens(finalPrompt);
    const estimatedCost = estimateCost(inputTokens);
    
    console.log(`[INTELLIGENT_QUERY] üí∞ Resposta - Tokens: ${inputTokens}, Custo: $${estimatedCost.toFixed(6)}`);
    
    // Chama API para resposta final
    const apiResponse = await chatWithAI(finalPrompt, []);
    
    // Calcula custo final
    const outputTokens = estimateTokens(apiResponse);
    const totalCost = estimateCost(inputTokens, outputTokens);
    
    console.log(`[INTELLIGENT_QUERY] üí∞ Resposta - Sa√≠da: ${outputTokens} tokens, Custo: $${totalCost.toFixed(6)}`);
    
    // Registra custo
    costMonitor.logOperation(
      'IntelligentQuery',
      'FINAL_ANSWER',
      inputTokens,
      outputTokens,
      `Resposta final usando ${sectionsUsed.length} se√ß√µes`
    );
    this.totalCost += totalCost;
    
    return {
      answer: apiResponse,
      sectionsUsed,
      totalCost: this.totalCost,
      processingTime: Date.now()
    };
  }

  /**
   * Processa pergunta simples sem an√°lise pr√©via (para compatibilidade)
   */
  async processSimpleQuery(
    userQuery: string,
    systemPrompt: string
  ): Promise<QueryResponse> {
    console.log(`[INTELLIGENT_QUERY] üîç Processando pergunta simples (sem documento)`);
    
    const startTime = Date.now();
    const inputTokens = estimateTokens(systemPrompt + userQuery);
    const estimatedCost = estimateCost(inputTokens);
    
    console.log(`[INTELLIGENT_QUERY] üí∞ Pergunta simples - Tokens: ${inputTokens}, Custo: $${estimatedCost.toFixed(6)}`);
    
    const apiResponse = await chatWithAI(systemPrompt, [{ autor: 'user', texto: userQuery }]);
    
    const outputTokens = estimateTokens(apiResponse);
    const totalCost = estimateCost(inputTokens, outputTokens);
    
    console.log(`[INTELLIGENT_QUERY] üí∞ Pergunta simples - Resposta: ${outputTokens} tokens, Custo: $${totalCost.toFixed(6)}`);
    
    costMonitor.logOperation(
      'IntelligentQuery',
      'SIMPLE_QUERY',
      inputTokens,
      outputTokens,
      `Pergunta simples sem documento`
    );
    
    return {
      answer: apiResponse,
      sectionsUsed: [],
      totalCost,
      processingTime: Date.now() - startTime
    };
  }

  /**
   * Obt√©m estat√≠sticas da sess√£o atual
   */
  getStats(): {
    totalQueries: number;
    totalCost: number;
    averageCostPerQuery: number;
  } {
    const stats = {
      totalQueries: this.queryCount,
      totalCost: this.totalCost,
      averageCostPerQuery: this.queryCount > 0 ? this.totalCost / this.queryCount : 0
    };
    
    console.log(`[INTELLIGENT_QUERY] üìä Estat√≠sticas da sess√£o:`, stats);
    return stats;
  }

  /**
   * Reseta estat√≠sticas
   */
  resetStats(): void {
    console.log(`[INTELLIGENT_QUERY] üîÑ Resetando estat√≠sticas...`);
    this.queryCount = 0;
    this.totalCost = 0;
  }
}

// Inst√¢ncia global
export const intelligentQuery = new IntelligentQuery();

// Debug functions
if (typeof window !== 'undefined') {
  (window as any).intelligentQuery = {
    stats: () => intelligentQuery.getStats(),
    reset: () => intelligentQuery.resetStats()
  };
}
