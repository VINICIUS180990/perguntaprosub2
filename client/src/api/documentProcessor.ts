/**
 * Sistema de Processamento de Documentos
 * Respons√°vel por processar documentos completos e solicitar divis√£o √† API
 */

// DEBUG: Log de inicializa√ß√£o
console.log('[DEBUG] documentProcessor.ts - Iniciando importa√ß√µes');

import { chatWithAI } from './chat';
import { costMonitor, estimateTokens, estimateCost } from './costMonitor';

// DEBUG: Verificar se as importa√ß√µes funcionaram
console.log('[DEBUG] documentProcessor.ts - Importa√ß√µes carregadas:');
console.log('[DEBUG] - chatWithAI:', typeof chatWithAI);
console.log('[DEBUG] - costMonitor:', typeof costMonitor);
console.log('[DEBUG] - estimateTokens:', typeof estimateTokens);
console.log('[DEBUG] - estimateCost:', typeof estimateCost);

export interface DocumentDivision {
  nome: string;
  conteudo: string;
  resumo: string;
  indice: number;
}

export interface DocumentProcessingResult {
  divisoes: DocumentDivision[];
  metadados: {
    como_foi_dividido: string;
    total_divisoes: number;
    documento_original: string;
    timestamp: number;
  };
}

/**
 * Prompt para a API dividir o documento
 */
const DOCUMENT_DIVISION_PROMPT = `Voc√™ √© um especialista em an√°lise de documentos militares brasileiros.

TAREFA: Analisar o documento completo e dividi-lo em partes l√≥gicas.

INSTRU√á√ïES OBRIGAT√ìRIAS:
1. Divida o documento em se√ß√µes l√≥gicas (cap√≠tulos, artigos, anexos, etc.)
2. Cada divis√£o deve ter entre 1000-3000 caracteres
3. Mantenha o contexto completo de cada se√ß√£o
4. Nomeie cada divis√£o de forma clara e descritiva
5. Crie um resumo conciso (m√°ximo 200 caracteres) para cada divis√£o

FORMATO DE RESPOSTA OBRIGAT√ìRIO (JSON):
{
  "como_foi_dividido": "Descri√ß√£o de como foi dividido (ex: 'Por cap√≠tulos e anexos')",
  "divisoes": [
    {
      "nome": "Nome da se√ß√£o",
      "conteudo": "Conte√∫do completo da se√ß√£o",
      "resumo": "Resumo conciso da se√ß√£o"
    }
  ]
}

DOCUMENTO PARA AN√ÅLISE:
`;

/**
 * Processa um documento completo e solicita divis√£o √† API
 */
export async function processDocument(
  documentContent: string,
  documentName: string
): Promise<DocumentProcessingResult> {
  console.log(`[DOCUMENT_PROCESSOR] üîÑ Iniciando processamento do documento: ${documentName}`);
  console.log(`[DOCUMENT_PROCESSOR] üìÑ Tamanho do documento: ${documentContent.length} caracteres`);
  
  const startTime = Date.now();
  
  try {
    // Monta o prompt completo
    const fullPrompt = DOCUMENT_DIVISION_PROMPT + documentContent;
    
    // Calcula custos estimados
    const inputTokens = estimateTokens(fullPrompt);
    const estimatedCost = estimateCost(inputTokens);
    
    console.log(`[DOCUMENT_PROCESSOR] üí∞ Tokens de entrada: ${inputTokens}`);
    console.log(`[DOCUMENT_PROCESSOR] üí∞ Custo estimado: $${estimatedCost.toFixed(6)}`);
    
    // Chama a API para dividir o documento
    console.log(`[DOCUMENT_PROCESSOR] ü§ñ Enviando documento para API...`);
    
    // LOG DETALHADO: Capturar resposta da API
    let apiResponse;
    try {
      console.log('[DOCUMENT_PROCESSOR] üì§ ENVIANDO PARA API:');
      console.log('[DOCUMENT_PROCESSOR] üì§ - Prompt length:', fullPrompt.length);
      console.log('[DOCUMENT_PROCESSOR] üì§ - Document name:', documentName);
      console.log('[DOCUMENT_PROCESSOR] üì§ - Aguardando resposta...');
      
      apiResponse = await chatWithAI(fullPrompt, []);
      
      console.log('[DOCUMENT_PROCESSOR] üì• RESPOSTA DA API RECEBIDA:');
      console.log('[DOCUMENT_PROCESSOR] üì• - Response length:', apiResponse.length);
      console.log('[DOCUMENT_PROCESSOR] üì• - Response preview:', apiResponse.substring(0, 200) + '...');
      
    } catch (error) {
      console.error('[DOCUMENT_PROCESSOR] ‚ùå ERRO NA API:', error);
      throw error;
    }
    
    console.log(`[DOCUMENT_PROCESSOR] ‚úÖ Resposta recebida da API`);
    console.log(`[DOCUMENT_PROCESSOR] üìù Tamanho da resposta: ${apiResponse.length} caracteres`);
    
    // Calcula custos finais
    const outputTokens = estimateTokens(apiResponse);
    const totalCost = estimateCost(inputTokens, outputTokens);
    
    console.log(`[DOCUMENT_PROCESSOR] üí∞ Tokens de sa√≠da: ${outputTokens}`);
    console.log(`[DOCUMENT_PROCESSOR] üí∞ Custo total: $${totalCost.toFixed(6)}`);
    
    // Registra no monitor de custos
    costMonitor.logOperation(
      'DocumentProcessor',
      'DIVISION',
      inputTokens,
      outputTokens,
      `Divis√£o do documento: ${documentName}`
    );
    
    // Parseia a resposta JSON
    let parsedResponse;
    try {
      // Remove poss√≠veis marcadores de c√≥digo
      const cleanResponse = apiResponse.replace(/```json|```/g, '').trim();
      
      console.log('[DOCUMENT_PROCESSOR] üßπ LIMPANDO RESPOSTA:');
      console.log('[DOCUMENT_PROCESSOR] üßπ - Original length:', apiResponse.length);
      console.log('[DOCUMENT_PROCESSOR] üßπ - Clean length:', cleanResponse.length);
      console.log('[DOCUMENT_PROCESSOR] üßπ - Clean preview:', cleanResponse.substring(0, 300) + '...');
      
      parsedResponse = JSON.parse(cleanResponse);
      
      console.log(`[DOCUMENT_PROCESSOR] ‚úÖ JSON parseado com sucesso`);
      console.log(`[DOCUMENT_PROCESSOR] ‚úÖ Divis√µes encontradas:`, parsedResponse.divisions?.length || 0);
      
      // Validar estrutura da resposta
      if (parsedResponse.divisions && Array.isArray(parsedResponse.divisions)) {
        console.log('[DOCUMENT_PROCESSOR] üìã DIVIS√ïES DETALHADAS:');
        parsedResponse.divisions.forEach((div: any, index: number) => {
          console.log(`[DOCUMENT_PROCESSOR] üìã ${index + 1}. "${div.name}" - ${div.content?.length || 0} chars`);
        });
      } else {
        console.warn('[DOCUMENT_PROCESSOR] ‚ö†Ô∏è  ESTRUTURA INESPERADA:', Object.keys(parsedResponse));
      }
      
    } catch (parseError) {
      console.error(`[DOCUMENT_PROCESSOR] ‚ùå Erro ao parsear JSON:`, parseError);
      console.error(`[DOCUMENT_PROCESSOR] ‚ùå Resposta problem√°tica:`, apiResponse.substring(0, 500));
      throw new Error(`Erro ao parsear resposta da API: ${parseError}`);
    }
    
    // Valida a estrutura da resposta
    if (!parsedResponse.divisoes || !Array.isArray(parsedResponse.divisoes)) {
      console.error(`[DOCUMENT_PROCESSOR] ‚ùå Estrutura inv√°lida na resposta da API`);
      throw new Error('Resposta da API n√£o cont√©m divis√µes v√°lidas');
    }
    
    // Processa e valida cada divis√£o
    const divisoes: DocumentDivision[] = parsedResponse.divisoes.map((div: any, index: number) => {
      if (!div.nome || !div.conteudo || !div.resumo) {
        console.warn(`[DOCUMENT_PROCESSOR] ‚ö†Ô∏è Divis√£o ${index} incompleta, tentando corrigir`);
      }
      
      return {
        nome: div.nome || `Se√ß√£o ${index + 1}`,
        conteudo: div.conteudo || '',
        resumo: div.resumo || 'Resumo n√£o dispon√≠vel',
        indice: index
      };
    });
    
    const processingTime = Date.now() - startTime;
    console.log(`[DOCUMENT_PROCESSOR] ‚è±Ô∏è Processamento conclu√≠do em ${processingTime}ms`);
    console.log(`[DOCUMENT_PROCESSOR] üìä Total de divis√µes criadas: ${divisoes.length}`);
    
    // Log detalhado das divis√µes
    divisoes.forEach((div, index) => {
      console.log(`[DOCUMENT_PROCESSOR] üìã Divis√£o ${index + 1}: "${div.nome}"`);
      console.log(`[DOCUMENT_PROCESSOR] üìã Tamanho: ${div.conteudo.length} chars`);
      console.log(`[DOCUMENT_PROCESSOR] üìã Resumo: ${div.resumo.substring(0, 100)}...`);
    });
    
    const result: DocumentProcessingResult = {
      divisoes,
      metadados: {
        como_foi_dividido: parsedResponse.como_foi_dividido || 'Divis√£o autom√°tica',
        total_divisoes: divisoes.length,
        documento_original: documentName,
        timestamp: Date.now()
      }
    };
    
    console.log(`[DOCUMENT_PROCESSOR] üéâ Processamento finalizado com sucesso!`);
    return result;
    
  } catch (error) {
    const processingTime = Date.now() - startTime;
    console.error(`[DOCUMENT_PROCESSOR] ‚ùå Erro durante processamento ap√≥s ${processingTime}ms:`, error);
    
    // Registra erro no monitor de custos
    costMonitor.logOperation(
      'DocumentProcessor',
      'ERROR',
      0,
      0,
      `Erro no processamento: ${error}`
    );
    
    throw error;
  }
}

/**
 * Valida se um documento processado est√° v√°lido
 */
export function validateProcessedDocument(result: DocumentProcessingResult): boolean {
  console.log(`[DOCUMENT_PROCESSOR] üîç Validando documento processado...`);
  
  if (!result.divisoes || result.divisoes.length === 0) {
    console.error(`[DOCUMENT_PROCESSOR] ‚ùå Nenhuma divis√£o encontrada`);
    return false;
  }
  
  for (const div of result.divisoes) {
    if (!div.nome || !div.conteudo) {
      console.error(`[DOCUMENT_PROCESSOR] ‚ùå Divis√£o inv√°lida encontrada:`, div.nome);
      return false;
    }
  }
  
  console.log(`[DOCUMENT_PROCESSOR] ‚úÖ Documento v√°lido com ${result.divisoes.length} divis√µes`);
  return true;
}
