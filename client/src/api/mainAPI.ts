/**
 * API Principal - Sistema de Documentos Inteligente
 * Coordena processamento de documentos e consultas do usu√°rio
 */

import { processDocument, validateProcessedDocument } from './documentProcessor';
import { documentCache } from './documentCache';
import { intelligentQuery } from './intelligentQuery';
import type { DocumentProcessingResult } from './documentProcessor';
import type { QueryResponse } from './intelligentQuery';
import type { MessageHistory } from './chat';

/**
 * Interface principal para processar documentos
 */
export async function processDocumentContent(
  documentContent: string,
  documentName: string
): Promise<DocumentProcessingResult> {
  console.log(`[MAIN_API] üöÄ Iniciando processamento completo do documento: ${documentName}`);
  console.log(`[MAIN_API] üìä Tamanho do documento: ${documentContent.length} caracteres`);
  
  try {
    // Verifica se j√° est√° em cache
    if (documentCache.hasDocument(documentContent, documentName)) {
      console.log(`[MAIN_API] ‚ö° Documento encontrado no cache, recuperando...`);
      const cachedResult = documentCache.getDocument(documentContent, documentName);
      
      if (cachedResult && validateProcessedDocument(cachedResult)) {
        console.log(`[MAIN_API] ‚úÖ Documento v√°lido recuperado do cache`);
        console.log(`[MAIN_API] üìä Divis√µes em cache: ${cachedResult.divisoes.length}`);
        return cachedResult;
      } else {
        console.warn(`[MAIN_API] ‚ö†Ô∏è Documento em cache inv√°lido, reprocessando...`);
      }
    }

    // Processa o documento pela primeira vez
    console.log(`[MAIN_API] üîÑ Processando documento pela primeira vez...`);
    const result = await processDocument(documentContent, documentName);
    
    console.log(`[MAIN_API] ‚úÖ DOCUMENTO PROCESSADO COM SUCESSO:`);
    console.log(`[MAIN_API] ‚úÖ - Divis√µes criadas: ${result.divisoes.length}`);
    console.log(`[MAIN_API] ‚úÖ - Como foi dividido: ${result.metadados.como_foi_dividido}`);
    
    // Valida resultado
    if (!validateProcessedDocument(result)) {
      console.error(`[MAIN_API] ‚ùå DOCUMENTO PROCESSADO INV√ÅLIDO`);
      throw new Error('Documento processado √© inv√°lido');
    }
    
    console.log(`[MAIN_API] ‚úÖ Valida√ß√£o do documento: PASSOU`);

    // Armazena no cache
    console.log(`[MAIN_API] üíæ Armazenando resultado no cache...`);
    documentCache.setDocument(documentContent, documentName, result);
    console.log(`[MAIN_API] üíæ ‚úÖ Documento armazenado no cache com sucesso`);
    
    console.log(`[MAIN_API] üéØ PROCESSAMENTO COMPLETO FINALIZADO`);
    
    console.log(`[MAIN_API] üéâ Processamento conclu√≠do com sucesso!`);
    console.log(`[MAIN_API] üìä Total de divis√µes: ${result.divisoes.length}`);
    console.log(`[MAIN_API] üìä M√©todo de divis√£o: ${result.metadados.como_foi_dividido}`);
    
    return result;
    
  } catch (error) {
    console.error(`[MAIN_API] ‚ùå Erro durante processamento do documento:`, error);
    throw error;
  }
}

/**
 * Interface principal para processar consultas do usu√°rio
 */
export async function processUserQuery(
  userQuery: string,
  documentContent: string | null,
  documentName: string | null,
  systemPrompt: string,
  messageHistory: MessageHistory[] = []
): Promise<QueryResponse> {
  console.log(`[MAIN_API] üîç Processando consulta do usu√°rio: "${userQuery.substring(0, 100)}..."`);
  console.log(`[MAIN_API] üìÑ Documento dispon√≠vel: ${documentContent ? 'SIM' : 'N√ÉO'}`);
  console.log(`[MAIN_API] üìö Hist√≥rico de mensagens: ${messageHistory.length}`);
  
  try {
    // Se n√£o h√° documento, processa como consulta simples
    if (!documentContent || !documentName) {
      console.log(`[MAIN_API] üí¨ Processando como consulta simples (sem documento)`);
      return await intelligentQuery.processSimpleQuery(userQuery, systemPrompt);
    }

    // Obt√©m documento processado (cache ou processamento)
    console.log(`[MAIN_API] üìö Obtendo divis√µes do documento...`);
    const processedDoc = await processDocumentContent(documentContent, documentName);
    
    console.log(`[MAIN_API] üìö ‚úÖ DIVIS√ïES OBTIDAS:`);
    console.log(`[MAIN_API] üìö - Total de divis√µes: ${processedDoc.divisoes.length}`);
    processedDoc.divisoes.forEach((div, index) => {
      console.log(`[MAIN_API] üìö ${index + 1}. "${div.nome}" (${div.conteudo.length} chars)`);
    });
    
    // Processa consulta com documento
    console.log(`[MAIN_API] üß† Processando consulta inteligente com documento...`);
    console.log(`[MAIN_API] üß† - Pergunta: "${userQuery.substring(0, 100)}..."`);
    console.log(`[MAIN_API] üß† - Divis√µes dispon√≠veis: ${processedDoc.divisoes.length}`);
    
    const response = await intelligentQuery.processQuery(
      userQuery,
      processedDoc.divisoes,
      systemPrompt
    );
    
    console.log(`[MAIN_API] ‚úÖ CONSULTA PROCESSADA COM SUCESSO:`);
    console.log(`[MAIN_API] ‚úÖ - Resposta length: ${response.answer.length} chars`);
    console.log(`[MAIN_API] ‚úÖ - Custo total: $${response.totalCost.toFixed(6)}`);
    console.log(`[MAIN_API] ‚úÖ - Tempo de processamento: ${response.processingTime}ms`);
    console.log(`[MAIN_API] ‚úÖ - Se√ß√µes utilizadas: ${response.sectionsUsed.length}/${processedDoc.divisoes.length}`);
    
    // Log das se√ß√µes utilizadas
    if (response.sectionsUsed.length > 0) {
      console.log(`[MAIN_API] üéØ SE√á√ïES SELECIONADAS:`);
      response.sectionsUsed.forEach((sectionName, index) => {
        console.log(`[MAIN_API] üéØ ${index + 1}. "${sectionName}"`);
      });
    }
    
    return response;
    
  } catch (error) {
    console.error(`[MAIN_API] ‚ùå Erro durante processamento da consulta:`, error);
    throw error;
  }
}

/**
 * Fun√ß√£o espec√≠fica para LandingPage
 */
export async function processLandingPageQuery(
  userQuery: string,
  documentContent: string | null,
  documentName: string | null,
  systemPrompt: string,
  messageHistory: MessageHistory[] = []
): Promise<string> {
  console.log(`[MAIN_API] üè† Processando consulta da LandingPage`);
  
  try {
    const response = await processUserQuery(
      userQuery,
      documentContent,
      documentName,
      systemPrompt,
      messageHistory
    );
    
    console.log(`[MAIN_API] ‚úÖ LandingPage - Resposta gerada com sucesso`);
    return response.answer;
    
  } catch (error) {
    console.error(`[MAIN_API] ‚ùå LandingPage - Erro:`, error);
    throw error;
  }
}

/**
 * Fun√ß√£o espec√≠fica para MainPage
 */
export async function processMainPageQuery(
  userQuery: string,
  documentContent: string | null,
  documentName: string | null,
  systemPrompt: string,
  messageHistory: MessageHistory[] = []
): Promise<string> {
  console.log(`[MAIN_API] üè¢ Processando consulta da MainPage`);
  
  try {
    const response = await processUserQuery(
      userQuery,
      documentContent,
      documentName,
      systemPrompt,
      messageHistory
    );
    
    console.log(`[MAIN_API] ‚úÖ MainPage - Resposta gerada com sucesso`);
    return response.answer;
    
  } catch (error) {
    console.error(`[MAIN_API] ‚ùå MainPage - Erro:`, error);
    throw error;
  }
}

/**
 * Fun√ß√£o para pr√©-carregar um documento (otimiza√ß√£o)
 */
export async function preloadDocument(
  documentContent: string,
  documentName: string
): Promise<boolean> {
  console.log(`[MAIN_API] ‚ö° Pr√©-carregando documento: ${documentName}`);
  
  try {
    await processDocumentContent(documentContent, documentName);
    console.log(`[MAIN_API] ‚úÖ Documento pr√©-carregado com sucesso`);
    return true;
    
  } catch (error) {
    console.error(`[MAIN_API] ‚ùå Erro ao pr√©-carregar documento:`, error);
    return false;
  }
}

/**
 * Fun√ß√£o para obter estat√≠sticas do sistema
 */
export function getSystemStats(): {
  cache: any;
  queries: any;
  costs: any;
} {
  console.log(`[MAIN_API] üìä Obtendo estat√≠sticas do sistema...`);
  
  const stats = {
    cache: documentCache.getStats(),
    queries: intelligentQuery.getStats(),
    costs: {
      // Adicionar estat√≠sticas de custo se necess√°rio
    }
  };
  
  console.log(`[MAIN_API] üìä Estat√≠sticas:`, stats);
  return stats;
}

/**
 * Fun√ß√£o para limpar cache do sistema
 */
export function clearSystemCache(): void {
  console.log(`[MAIN_API] üßπ Limpando cache do sistema...`);
  
  documentCache.clear();
  intelligentQuery.resetStats();
  
  console.log(`[MAIN_API] ‚úÖ Cache do sistema limpo`);
}

/**
 * Fun√ß√£o para verificar sa√∫de do sistema
 */
export function checkSystemHealth(): {
  status: 'healthy' | 'warning' | 'error';
  message: string;
  details: any;
} {
  console.log(`[MAIN_API] üè• Verificando sa√∫de do sistema...`);
  
  try {
    const cacheStats = documentCache.getStats();
    const queryStats = intelligentQuery.getStats();
    
    // Verifica√ß√µes b√°sicas
    const checks = {
      cacheWorking: cacheStats.totalDocuments >= 0,
      queryWorking: queryStats.totalQueries >= 0,
      memoryUsage: cacheStats.totalDocuments < 50 // Limite arbitr√°rio
    };
    
    const allHealthy = Object.values(checks).every(check => check);
    
    const result = {
      status: allHealthy ? 'healthy' as const : 'warning' as const,
      message: allHealthy ? 'Sistema funcionando normalmente' : 'Sistema com avisos',
      details: {
        checks,
        cache: cacheStats,
        queries: queryStats
      }
    };
    
    console.log(`[MAIN_API] üè• Status do sistema: ${result.status}`);
    return result;
    
  } catch (error) {
    console.error(`[MAIN_API] ‚ùå Erro ao verificar sa√∫de do sistema:`, error);
    return {
      status: 'error',
      message: `Erro ao verificar sistema: ${error}`,
      details: { error }
    };
  }
}

// Exp√µe fun√ß√µes de debug globalmente
if (typeof window !== 'undefined') {
  (window as any).perguntaProSubAPI = {
    stats: getSystemStats,
    clear: clearSystemCache,
    health: checkSystemHealth,
    preload: preloadDocument
  };
}
