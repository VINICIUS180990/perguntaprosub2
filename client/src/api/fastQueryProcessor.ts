/**
 * FAST QUERY PROCESSOR - Processador r√°pido com divis√£o local
 * Usa divis√£o local instant√¢nea + API s√≥ para sele√ß√£o e resposta
 */

import { chatWithAI } from './chat';
import { costMonitor, estimateTokens, estimateCost } from './costMonitor';
import { localDocumentDivider } from './localDocumentDivider';
import { localDocumentCache } from './localDocumentCache';
import { partSelector } from './partSelector';
import type { LocalDivision, LocalDivisionResult } from './localDocumentDivider';

export interface FastQueryResponse {
  answer: string;
  sectionsUsed: string[];
  totalCost: number;
  processingTime: number;
  fromCache: boolean;
}

/**
 * Prompt otimizado para resposta final
 */
const FAST_FINAL_ANSWER_PROMPT = `Voc√™ √© o pr√≥prio PerguntaProSub, uma IA militar brasileira especializada em regulamentos militares.

PERGUNTA DO USU√ÅRIO:
{USER_QUERY}

SE√á√ïES SELECIONADAS DO DOCUMENTO:
{SELECTED_PARTS}

INSTRU√á√ïES:
1. **PRECIS√ÉO**: Use APENAS as se√ß√µes fornecidas
2. **CITA√á√ïES**: Mencione se√ß√µes espec√≠ficas quando relevante
3. **OBJETIVIDADE**: Resposta direta e pr√°tica
4. **TERMINOLOGIA MILITAR**: Use linguagem adequada
5. **REFER√äNCIAS**: Cite as fontes das informa√ß√µes

RESPONDA DE FORMA CLARA E OBJETIVA:`;

/**
 * Classe respons√°vel pelo processamento r√°pido de consultas
 */
export class FastQueryProcessor {
  private queryCount = 0;
  private totalCost = 0;

  /**
   * Processa consulta com documento usando divis√£o local r√°pida
   */
  async processQueryWithDocument(
    userQuery: string,
    documentContent: string,
    documentName: string
  ): Promise<FastQueryResponse> {
    const startTime = Date.now();
    this.queryCount++;
    
    console.log(`[FAST_PROCESSOR] üöÄ CONSULTA R√ÅPIDA ${this.queryCount}:`);
    console.log(`[FAST_PROCESSOR] üöÄ - Pergunta: "${userQuery.substring(0, 100)}..."`);
    console.log(`[FAST_PROCESSOR] üöÄ - Documento: ${documentName}`);
    
    try {
      // ETAPA 1: Obter divis√µes locais (instant√¢neo)
      console.log(`[FAST_PROCESSOR] ‚ö° ETAPA 1: Obtendo divis√µes locais...`);
      const divisions = await this.getLocalDivisions(documentContent, documentName);
      
      console.log(`[FAST_PROCESSOR] ‚ö° ‚úÖ DIVIS√ïES LOCAIS OBTIDAS:`);
      console.log(`[FAST_PROCESSOR] ‚ö° - Total: ${divisions.divisoes.length}`);
      console.log(`[FAST_PROCESSOR] ‚ö° - M√©todo: ${divisions.como_dividiu}`);
      
      // ETAPA 2: Sele√ß√£o r√°pida de partes via API
      console.log(`[FAST_PROCESSOR] üéØ ETAPA 2: Sele√ß√£o r√°pida de partes...`);
      const selection = await partSelector.selectParts(userQuery, divisions.divisoes);
      
      console.log(`[FAST_PROCESSOR] üéØ ‚úÖ SELE√á√ÉO R√ÅPIDA:`);
      console.log(`[FAST_PROCESSOR] üéØ - Partes selecionadas: ${selection.partes_necessarias.length}/${divisions.divisoes.length}`);
      
      // Verificar se precisa de documento
      if (selection.partes_necessarias.length === 0) {
        console.log(`[FAST_PROCESSOR] üí¨ Pergunta geral - sem documento necess√°rio`);
        return await this.processGeneralQuery(userQuery);
      }
      
      // ETAPA 3: Filtrar partes selecionadas
      console.log(`[FAST_PROCESSOR] üîç ETAPA 3: Filtrando partes...`);
      const selectedParts = partSelector.filterSelectedParts(divisions.divisoes, selection.partes_necessarias);
      
      let totalSelectedContent = 0;
      selectedParts.forEach(part => {
        totalSelectedContent += part.conteudo.length;
      });
      
      const economyPercent = ((documentContent.length - totalSelectedContent) / documentContent.length * 100).toFixed(1);
      
      console.log(`[FAST_PROCESSOR] üîç ‚úÖ PARTES FILTRADAS:`);
      console.log(`[FAST_PROCESSOR] üîç - Partes usadas: ${selectedParts.length}`);
      console.log(`[FAST_PROCESSOR] üîç - Conte√∫do selecionado: ${totalSelectedContent} chars (${estimateTokens(selectedParts.map(p => p.conteudo).join(''))} tokens)`);
      console.log(`[FAST_PROCESSOR] üîç - ECONOMIA: ${economyPercent}% de tokens!`);
      
      // ETAPA 4: Resposta final r√°pida
      console.log(`[FAST_PROCESSOR] ü§ñ ETAPA 4: Gerando resposta final...`);
      const finalAnswer = await this.generateFastAnswer(userQuery, selectedParts);
      
      const processingTime = Date.now() - startTime;
      
      const response: FastQueryResponse = {
        answer: finalAnswer,
        sectionsUsed: selectedParts.map(p => p.nome),
        totalCost: this.totalCost,
        processingTime,
        fromCache: divisions.timestamp < Date.now() - 60000 // Se criado h√° mais de 1 min
      };
      
      console.log(`[FAST_PROCESSOR] ‚úÖ CONSULTA R√ÅPIDA CONCLU√çDA:`);
      console.log(`[FAST_PROCESSOR] ‚úÖ - Resposta: ${finalAnswer.length} chars (${estimateTokens(finalAnswer)} tokens)`);
      console.log(`[FAST_PROCESSOR] ‚úÖ - Economia: ${economyPercent}%`);
      console.log(`[FAST_PROCESSOR] ‚úÖ - Custo: $${response.totalCost.toFixed(6)}`);
      console.log(`[FAST_PROCESSOR] ‚úÖ - Tempo: ${response.processingTime}ms`);
      
      // ‚úÖ DISPLAY CHAMATIVO DO CUSTO TOTAL DA CONVERSA
      this.displayConversationCost();
      
      return response;
      
    } catch (error) {
      const processingTime = Date.now() - startTime;
      console.error(`[FAST_PROCESSOR] ‚ùå Erro ap√≥s ${processingTime}ms:`, error);
      
      costMonitor.logOperation(
        'FastProcessor',
        'ERROR',
        0,
        0,
        `Erro: ${error}`
      );
      
      throw error;
    }
  }

  /**
   * Obter divis√µes locais (cache ou processar instantaneamente)
   */
  private async getLocalDivisions(documentContent: string, documentName: string): Promise<LocalDivisionResult> {
    console.log(`[FAST_PROCESSOR] üìã Verificando cache local...`);
    
    // Verificar cache primeiro
    if (localDocumentCache.hasDocument(documentContent, documentName)) {
      console.log(`[FAST_PROCESSOR] ‚ö° USANDO CACHE LOCAL`);
      const cachedDivisions = localDocumentCache.getDocument(documentContent, documentName);
      
      if (cachedDivisions) {
        return cachedDivisions;
      }
    }
    
    // Criar divis√µes localmente (instant√¢neo)
    console.log(`[FAST_PROCESSOR] ‚ö° CRIANDO DIVIS√ïES LOCAIS INSTANT√ÇNEAS...`);
    const divisions = localDocumentDivider.divideDocumentLocally(documentContent, documentName);
    
    // Armazenar no cache
    console.log(`[FAST_PROCESSOR] ‚ö° Armazenando no cache local...`);
    localDocumentCache.setDocument(documentContent, documentName, divisions);
    
    return divisions;
  }

  /**
   * Gerar resposta final otimizada
   */
  private async generateFastAnswer(userQuery: string, selectedParts: LocalDivision[]): Promise<string> {
    console.log(`[FAST_PROCESSOR] ü§ñ GERANDO RESPOSTA R√ÅPIDA:`);
    console.log(`[FAST_PROCESSOR] ü§ñ - Pergunta: "${userQuery.substring(0, 80)}..."`);
    console.log(`[FAST_PROCESSOR] ü§ñ - Partes: ${selectedParts.length}`);
    
    // Preparar conte√∫do otimizado
    const selectedContent = selectedParts.map((part) => {
      return `=== ${part.nome} ===\n${part.conteudo}\n`;
    }).join('\n');
    
    console.log(`[FAST_PROCESSOR] ü§ñ - Conte√∫do total: ${selectedContent.length} chars (${estimateTokens(selectedContent)} tokens)`);
    
    // Prompt otimizado
    const fullPrompt = FAST_FINAL_ANSWER_PROMPT
      .replace('{USER_QUERY}', userQuery)
      .replace('{SELECTED_PARTS}', selectedContent);
    
    const inputTokens = estimateTokens(fullPrompt);
    console.log(`[FAST_PROCESSOR] ü§ñ üí∞ Tokens entrada: ${inputTokens}`);
    
    console.log(`[FAST_PROCESSOR] ü§ñ üì§ Enviando para API...`);
    
    const apiResponse = await chatWithAI(fullPrompt, []);
    
    // Calcular custos
    const outputTokens = estimateTokens(apiResponse);
    const totalCost = estimateCost(inputTokens, outputTokens);
    
    console.log(`[FAST_PROCESSOR] ü§ñ üì• Resposta recebida: ${apiResponse.length} chars (${outputTokens} tokens)`);
    console.log(`[FAST_PROCESSOR] ü§ñ üí∞ Tokens sa√≠da: ${outputTokens}`);
    console.log(`[FAST_PROCESSOR] ü§ñ üí∞ Custo: $${totalCost.toFixed(6)}`);
    
    // Registrar custo
    costMonitor.logOperation(
      'FastProcessor',
      'FINAL_ANSWER',
      inputTokens,
      outputTokens,
      `Resposta r√°pida usando ${selectedParts.length} partes`
    );
    
    this.totalCost += totalCost;
    
    return apiResponse;
  }

  /**
   * Processar pergunta geral (sem documento)
   */
  private async processGeneralQuery(userQuery: string): Promise<FastQueryResponse> {
    const startTime = Date.now();
    
    console.log(`[FAST_PROCESSOR] üí¨ PERGUNTA GERAL R√ÅPIDA:`);
    console.log(`[FAST_PROCESSOR] üí¨ - Pergunta: "${userQuery.substring(0, 100)}..."`);
    
    const inputTokens = estimateTokens(userQuery);
    const prompt = 'Voc√™ √© uma IA militar brasileira especializada em regulamentos militares. Responda de forma precisa e objetiva.';
    
    const apiResponse = await chatWithAI(prompt, [{ autor: 'user', texto: userQuery }]);
    
    const outputTokens = estimateTokens(apiResponse);
    const totalCost = estimateCost(inputTokens, outputTokens);
    
    costMonitor.logOperation(
      'FastProcessor',
      'GENERAL_QUERY',
      inputTokens,
      outputTokens,
      'Pergunta geral sem documento'
    );
    
    const processingTime = Date.now() - startTime;
    
    console.log(`[FAST_PROCESSOR] üí¨ ‚úÖ Pergunta geral conclu√≠da: ${processingTime}ms`);
    
    return {
      answer: apiResponse,
      sectionsUsed: [],
      totalCost,
      processingTime,
      fromCache: false
    };
  }

  /**
   * Estat√≠sticas do processador
   */
  getStats(): {
    totalQueries: number;
    totalCost: number;
  } {
    return {
      totalQueries: this.queryCount,
      totalCost: this.totalCost
    };
  }

  /**
   * Resetar estat√≠sticas
   */
  resetStats(): void {
    this.queryCount = 0;
    this.totalCost = 0;
    console.log(`[FAST_PROCESSOR] üîÑ Estat√≠sticas resetadas`);
  }

  /**
   * Exibir custo total da conversa de forma chamativa
   */
  private displayConversationCost(): void {
    const totalQueries = this.queryCount;
    const totalCost = this.totalCost;
    
    // ‚úÖ DISPLAY CHAMATIVO PARA IDENTIFICAR FACILMENTE NO CONSOLE
    console.log('');
    console.log('üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞');
    console.log('üí∞                         CUSTO TOTAL DA CONVERSA                         üí∞');
    console.log('üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞');
    console.log(`üí∞ üìä CONSULTAS REALIZADAS: ${totalQueries}`);
    console.log(`üí∞ üíµ CUSTO TOTAL: $${totalCost.toFixed(6)}`);
    console.log(`üí∞ üìà CUSTO M√âDIO POR CONSULTA: $${(totalCost / Math.max(totalQueries, 1)).toFixed(6)}`);
    
    // Aviso se custo est√° alto
    if (totalCost > 0.10) {
      console.log('üí∞ ‚ö†Ô∏è  ATEN√á√ÉO: CUSTO ALTO DETECTADO!');
    } else if (totalCost > 0.05) {
      console.log('üí∞ üü° CUSTO MODERADO');
    } else {
      console.log('üí∞ ‚úÖ CUSTO BAIXO - ECONOMIA EFICIENTE');
    }
    
    console.log('üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞üéØüí∞');
    console.log('');
  }
}

// Inst√¢ncia global
export const fastQueryProcessor = new FastQueryProcessor();
