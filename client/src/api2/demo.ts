/**
 * DEMONSTRADOR API2
 * Arquivo para testar e demonstrar o funcionamento da API2
 */

import { api2 } from './index';
import { logger } from './utils';

const PREFIX = '[DEMO]';

logger.info(PREFIX, 'Iniciando demonstra√ß√£o da API2...');

/**
 * Documento de exemplo pequeno
 */
const SMALL_DOCUMENT = `
CONTRATO DE PRESTA√á√ÉO DE SERVI√áOS

Entre as partes:
CONTRATANTE: Jo√£o Silva
CONTRATADO: Maria Santos

CL√ÅUSULA 1: O servi√ßo ser√° de consultoria em marketing digital.
CL√ÅUSULA 2: O prazo de execu√ß√£o √© de 30 dias.
CL√ÅUSULA 3: O valor total √© de R$ 5.000,00.
CL√ÅUSULA 4: O pagamento ser√° realizado em 2 parcelas iguais.

Data: 15/12/2024
Assinaturas: _______________  _______________
`;

/**
 * Documento de exemplo grande
 */
const LARGE_DOCUMENT = `
MANUAL DE OPERA√á√ÉO DO SISTEMA

CAP√çTULO 1: INTRODU√á√ÉO
Este manual descreve o funcionamento completo do sistema de gest√£o empresarial.
O sistema foi desenvolvido para atender empresas de pequeno e m√©dio porte.
Possui m√≥dulos integrados de vendas, estoque, financeiro e recursos humanos.
A interface √© intuitiva e permite opera√ß√£o por usu√°rios com diferentes n√≠veis t√©cnicos.

CAP√çTULO 2: INSTALA√á√ÉO
2.1 REQUISITOS M√çNIMOS
- Sistema operacional: Windows 10 ou superior
- Mem√≥ria RAM: 8GB m√≠nimo, 16GB recomendado
- Espa√ßo em disco: 50GB livres
- Processador: Intel i5 ou equivalente AMD
- Conex√£o com internet para atualiza√ß√µes

2.2 PROCESSO DE INSTALA√á√ÉO
Baixe o arquivo instalador do site oficial da empresa.
Execute como administrador e siga as instru√ß√µes na tela.
Configure a conex√£o com o banco de dados durante a instala√ß√£o.
Reinicie o computador ap√≥s a conclus√£o do processo.

CAP√çTULO 3: CONFIGURA√á√ÉO INICIAL
3.1 CRIA√á√ÉO DE USU√ÅRIOS
Acesse o m√≥dulo administrativo com as credenciais padr√£o.
Crie usu√°rios para cada funcion√°rio que utilizar√° o sistema.
Configure permiss√µes espec√≠ficas para cada perfil de usu√°rio.
Teste o acesso com cada conta criada.

3.2 CONFIGURA√á√ÉO DE EMPRESA
Cadastre os dados b√°sicos da empresa: raz√£o social, CNPJ, endere√ßo.
Configure par√¢metros fiscais espec√≠ficos do seu estado.
Defina as formas de pagamento aceitas pela empresa.
Configure os impostos e taxas aplic√°veis.

CAP√çTULO 4: M√ìDULO DE VENDAS
4.1 CADASTRO DE CLIENTES
O sistema permite cadastro completo de pessoas f√≠sicas e jur√≠dicas.
Campos obrigat√≥rios incluem nome, documento e contato.
Hist√≥rico de compras fica dispon√≠vel na ficha do cliente.
Sistema de pontua√ß√£o e fidelidade pode ser ativado.

4.2 REGISTRO DE VENDAS
Vendas podem ser registradas via PDV ou manualmente.
Sistema calcula automaticamente impostos e descontos.
Permite parcelamento e diferentes formas de pagamento.
Emite cupom fiscal eletr√¥nico automaticamente.

CAP√çTULO 5: CONTROLE DE ESTOQUE
5.1 CADASTRO DE PRODUTOS
Cada produto deve ter c√≥digo √∫nico no sistema.
Descri√ß√£o detalhada facilita localiza√ß√£o e vendas.
Controle de estoque m√≠nimo gera alertas autom√°ticos.
Fotos dos produtos melhoram apresenta√ß√£o nas vendas.

5.2 MOVIMENTA√á√ÉO DE ESTOQUE
Entradas s√£o registradas via nota fiscal ou manualmente.
Sa√≠das s√£o automaticamente registradas nas vendas.
Relat√≥rios mostram giro de estoque por per√≠odo.
Invent√°rio permite ajustes e confer√™ncias peri√≥dicas.

ANEXO A: TROUBLESHOOTING
A.1 PROBLEMAS COMUNS
Sistema lento: Verifique espa√ßo em disco e mem√≥ria RAM.
Erro de conex√£o: Teste conectividade com banco de dados.
Falha na impress√£o: Configure drivers da impressora fiscal.
Backup falhou: Verifique permiss√µes da pasta de destino.

A.2 CONTATO SUPORTE
Email: suporte@empresa.com
Telefone: (11) 1234-5678
Hor√°rio: Segunda a sexta, 8h √†s 18h
Site: www.empresa.com/suporte
`;

/**
 * Exemplos de perguntas
 */
const EXAMPLE_QUERIES = {
  general: [
    'Oi, como est√°?',
    'O que √© intelig√™ncia artificial?',
    'Que horas s√£o?'
  ],
  smallDoc: [
    'Qual o valor do contrato?',
    'Quem s√£o as partes do contrato?',
    'Qual o prazo de execu√ß√£o?'
  ],
  largeDoc: [
    'Como instalar o sistema?',
    'Quais os requisitos m√≠nimos?',
    'Como cadastrar produtos?',
    'O que fazer se o sistema estiver lento?'
  ]
};

/**
 * Demonstra√ß√£o completa do sistema
 */
export class API2Demo {
  
  /**
   * Executa demonstra√ß√£o completa
   */
  async runFullDemo(): Promise<void> {
    logger.info(PREFIX, 'üöÄ INICIANDO DEMONSTRA√á√ÉO COMPLETA');
    
    try {
      // 1. Status inicial
      await this.showInitialStatus();
      
      // 2. Teste com documento pequeno
      await this.testSmallDocument();
      
      // 3. Teste com documento grande
      await this.testLargeDocument();
      
      // 4. Teste de queries gerais
      await this.testGeneralQueries();
      
      // 5. Estat√≠sticas finais
      await this.showFinalStats();
      
      logger.success(PREFIX, '‚úÖ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!');
      
    } catch (error) {
      logger.error(PREFIX, 'Erro na demonstra√ß√£o:', error);
    }
  }
  
  /**
   * Mostra status inicial
   */
  private async showInitialStatus(): Promise<void> {
    logger.info(PREFIX, 'üìä STATUS INICIAL DO SISTEMA:');
    api2.logStatus();
  }
  
  /**
   * Testa documento pequeno
   */
  private async testSmallDocument(): Promise<void> {
    logger.info(PREFIX, 'üìÑ TESTANDO DOCUMENTO PEQUENO...');
    
    // Pr√©-visualiza√ß√£o
    const preview = api2.previewDocument(SMALL_DOCUMENT, 'Contrato.txt');
    logger.info(PREFIX, `Preview: ${preview.type} - ${preview.tokenCount} tokens`);
    
    // Processamento
    const processResult = await api2.processDocument(SMALL_DOCUMENT, 'Contrato.txt', 'ATTACHED');
    
    if (processResult.success) {
      logger.success(PREFIX, 'Documento pequeno processado!');
      
      // Testar queries
      for (const query of EXAMPLE_QUERIES.smallDoc) {
        await this.testQuery(query);
        await this.sleep(1000); // Pausa entre queries
      }
    } else {
      logger.error(PREFIX, 'Falha no documento pequeno:', processResult.error);
    }
  }
  
  /**
   * Testa documento grande
   */
  private async testLargeDocument(): Promise<void> {
    logger.info(PREFIX, 'üìö TESTANDO DOCUMENTO GRANDE...');
    
    // Pr√©-visualiza√ß√£o
    const preview = api2.previewDocument(LARGE_DOCUMENT, 'Manual.txt');
    logger.info(PREFIX, `Preview: ${preview.type} - ${preview.tokenCount} tokens - ${preview.estimatedDivisions} divis√µes estimadas`);
    
    // Processamento
    const processResult = await api2.processDocument(LARGE_DOCUMENT, 'Manual.txt', 'ATTACHED');
    
    if (processResult.success) {
      logger.success(PREFIX, 'Documento grande processado!');
      
      // Testar queries
      for (const query of EXAMPLE_QUERIES.largeDoc) {
        await this.testQuery(query);
        await this.sleep(1500); // Pausa maior para documento grande
      }
    } else {
      logger.error(PREFIX, 'Falha no documento grande:', processResult.error);
    }
  }
  
  /**
   * Testa queries gerais
   */
  private async testGeneralQueries(): Promise<void> {
    logger.info(PREFIX, 'üí¨ TESTANDO QUERIES GERAIS...');
    
    for (const query of EXAMPLE_QUERIES.general) {
      await this.testQuery(query);
      await this.sleep(1000);
    }
  }
  
  /**
   * Testa uma query individual
   */
  private async testQuery(query: string): Promise<void> {
    logger.info(PREFIX, `‚ùì Testando: "${query}"`);
    
    const result = await api2.processQuery(query);
    
    if (result.success) {
      const response = result.response!;
      logger.success(PREFIX, `‚úÖ Resposta (${response.answer.length} chars):`);
      logger.info(PREFIX, `üìÑ Documento usado: ${response.documentUsed}`);
      logger.info(PREFIX, `üí∞ Custo: $${response.tokenCost.total.toFixed(6)}`);
      logger.info(PREFIX, `‚è±Ô∏è Tempo: ${response.processingTime.toFixed(0)}ms`);
      
      if (response.sectionsUsed.length > 0) {
        logger.info(PREFIX, `üìã Se√ß√µes: ${response.sectionsUsed.join(', ')}`);
      }
      
      // Mostrar in√≠cio da resposta
      const preview = response.answer.length > 100 
        ? response.answer.substring(0, 100) + '...'
        : response.answer;
      logger.info(PREFIX, `üí¨ "${preview}"`);
      
    } else {
      logger.error(PREFIX, '‚ùå Falha na query:', result.error);
    }
  }
  
  /**
   * Mostra estat√≠sticas finais
   */
  private async showFinalStats(): Promise<void> {
    logger.info(PREFIX, 'üìä ESTAT√çSTICAS FINAIS:');
    
    const stats = api2.getSystemStats();
    const costSummary = api2.getCostSummary();
    
    logger.info(PREFIX, `üìÑ Documentos processados: ${stats.totalDocuments}`);
    logger.info(PREFIX, `üìÑ - Pequenos: ${stats.smallDocuments}`);
    logger.info(PREFIX, `üìö - Grandes: ${stats.largeDocuments}`);
    logger.info(PREFIX, `‚ùì Queries processadas: ${stats.totalQueries}`);
    logger.info(PREFIX, `üí∞ Custo total: $${stats.totalCost.toFixed(4)}`);
    logger.info(PREFIX, `üíæ Cache usado: ${stats.cacheSize.toFixed(1)} KB`);
    logger.info(PREFIX, `üí∞ Budget restante hoje: $${costSummary.remainingBudget.toFixed(4)}`);
    
    // Mostrar documentos em cache
    const cachedDocs = api2.getCachedDocuments();
    logger.info(PREFIX, `üìÇ Documentos em cache: ${cachedDocs.length}`);
    cachedDocs.forEach(doc => {
      logger.info(PREFIX, `   - ${doc.name} (${doc.type}, ${doc.tokenCount} tokens)`);
    });
  }
  
  /**
   * Utilit√°rio para pausas
   */
  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
  
  /**
   * Demonstra√ß√£o r√°pida
   */
  async quickDemo(): Promise<void> {
    logger.info(PREFIX, '‚ö° DEMONSTRA√á√ÉO R√ÅPIDA');
    
    // S√≥ documento pequeno e uma query
    const processResult = await api2.processDocument(SMALL_DOCUMENT, 'Contrato.txt');
    
    if (processResult.success) {
      await this.testQuery('Qual o valor do contrato?');
      api2.logStatus();
    }
  }
  
  /**
   * Teste de performance
   */
  async performanceTest(): Promise<void> {
    logger.info(PREFIX, 'üöÄ TESTE DE PERFORMANCE');
    
    const startTime = Date.now();
    
    // Processar documento grande
    await api2.processDocument(LARGE_DOCUMENT, 'Manual_Performance.txt');
    
    // Fazer v√°rias queries
    const queries = [
      'Como instalar?',
      'Requisitos do sistema?',
      'Como fazer backup?',
      'Contato do suporte?'
    ];
    
    for (const query of queries) {
      await api2.processQuery(query);
    }
    
    const totalTime = Date.now() - startTime;
    
    logger.success(PREFIX, `‚ö° Performance test conclu√≠do em ${totalTime}ms`);
    
    const stats = api2.getSystemStats();
    logger.info(PREFIX, `üìä Total de queries: ${stats.totalQueries}`);
    logger.info(PREFIX, `üí∞ Custo total: $${stats.totalCost.toFixed(4)}`);
  }
  
  /**
   * Limpa sistema para nova demonstra√ß√£o
   */
  reset(): void {
    logger.info(PREFIX, 'üßπ Resetando sistema para nova demonstra√ß√£o...');
    api2.clearAll();
    logger.success(PREFIX, '‚úÖ Sistema resetado');
  }
}

// Inst√¢ncia global para uso
export const api2Demo = new API2Demo();

// Exportar para uso direto
export { SMALL_DOCUMENT, LARGE_DOCUMENT, EXAMPLE_QUERIES };

logger.success(PREFIX, 'Demonstrador API2 carregado e pronto para uso!');
logger.info(PREFIX, 'Use api2Demo.runFullDemo() para demonstra√ß√£o completa');
logger.info(PREFIX, 'Use api2Demo.quickDemo() para teste r√°pido');
logger.info(PREFIX, 'Use api2Demo.performanceTest() para teste de performance');
